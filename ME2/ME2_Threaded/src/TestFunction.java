
public class TestFunction {

	static double Ackley(double[] param) {
		double m_Sum1 = 0;
		double m_Sum2 = 0;
		int dim = param.length;

		for (int i = 0; i < dim; i++){
			m_Sum1 = m_Sum1 + param[i] * param[i];
			m_Sum2 = m_Sum2 + Math.cos(2 * Math.PI * param[i]);
		}

		double temp1 = 20 * Math.exp(-0.2 * Math.sqrt(m_Sum1 / dim));
		return 20 - temp1 - Math.exp(m_Sum2 / dim) + Math.E;
	}

	static double Hump6(double[] param) {

		double temp1 = param[0] * param[0];
		double temp2 = param[1] * param[1];
		double temp3 = param[0] * param[1];

		double result1 = (4 - 2.1 * temp1 + temp1 * temp1 / 3) * temp1;
		double result2 = (-4 + 4 * temp2) * temp2;

		return result1 + result2 + temp3;

	}
	
	static double Branin(double[] param) {

		double temp1 = param[1] - 5.1 / (4 * Math.PI * Math.PI) * param[0] * param[0] + param[0] * 5 / Math.PI - 6;
		double temp2 = 10 * (1 - 1 / (8 * Math.PI)) * Math.cos(param[0]);

		return temp1 * temp1 + temp2 + 10;

	}
	
	static double Matyas(double[] param) {
		return 0.26 * (param[0] * param[0] + param[1] * param[1])
				- 0.48 * param[0] * param[1];
	}
	
	static double Beale(double param[]) {

		double temp1 = Math.pow(1.5 - param[0] + param[0] * param[1], 2);
		double temp2 = Math.pow(2.25 - param[0] + param[0] * Math.pow(param[1], 2), 2);
		double temp3 = Math.pow(2.625 - param[0] + param[0] * Math.pow(param[1], 3), 2);
		return temp1 + temp2 + temp3;

	}
	
	static double Rosenbrock(double[] param) {
		double m_Sum = 0;
		for (int i = 0; i < param.length - 1; i++)
			m_Sum = m_Sum + 100 * Math.pow(param[i] * param[i] - param[i + 1], 2)
					+ (param[i] - 1) * (param[i] - 1);

		return m_Sum;
	}
	
	static double Schaffer(double[] param) {
		double temp = param[0] * param[0] + param[1] * param[1];
		double temp1 = Math.sin(temp * temp);
		double temp2 = (1 + 0.001 * temp) * (1 + 0.001 * temp);
		return 0.5 + (temp1 * temp1 - 0.5) / (temp2);

	}

	static double Griewank(double[] param) {

		double m_Sum = 0;
		double prod = 1;

		for (int i = 0; i < param.length; i++) {
			m_Sum += param[i] * param[i] / 4000;
			prod = prod * Math.cos(param[i] / Math.sqrt(i + 1));
		}

		return m_Sum - prod + 1;
	}
	
	static double Rastr(double[] param) {
		double m_Sum = 0;
		int dim = param.length;
		for (int i = 0; i < dim; i++)
			m_Sum = m_Sum + (param[i] * param[i] - 10 * Math.cos(2 * Math.PI * param[i]));

		return 10 * dim + m_Sum;
	}
	
	static double Schwefel(double[] param) {
		double m_Sum = 0;
		int dim = param.length;

		for (int i = 0; i < dim; i++)
			m_Sum = m_Sum + param[i] * Math.sin(Math.sqrt(Math.abs(param[i])));

		return 418.9829 * dim - m_Sum;

	}
	
	static double Sphere(double[] param) {
		double m_Sum = 0;

		for (int i = 0; i < param.length; i++)
			m_Sum += param[i] * param[i];

		return m_Sum;

	}
}
